{"name":"Aomvotingapp2","tagline":"","body":"== README AOM Voting App v1.0 (2015-03-31)\r\n\r\nThis README describes the basic technical information about the AOM Voting App v1. \r\nRuby version: ruby 2.0.0p353 (2013-11-22 revision 43784)\r\nRails version: Rails 4.0.13\r\nDatabase: PostgresSQL\r\n\r\nThis application is built using Ruby on Rails and deployed to production using Heroku and PostgreSQL database. It consists of 6 views accessible to the users and 1 view accessible only for the administrator. \r\n\r\n**The 6 user views are:**\r\n/nominees/new\r\n/candidate_selection\r\n/chairman_selection\r\n/fellows_vote\r\n/results\r\n\r\n**The administration view is:**\r\n/nominees\r\nTo display the total content of this view you need to click in the 2015 link. This is mainly to prevent unauthorized access to other users. In the future a username/password may be incorporated to make it really secure. \r\n\r\n***\r\n# Usage Instructions\r\nThe voting process consists of 5 main phases:\r\nPhase 1 - Fellow Nomination\r\nPhase 2 - Candidate Selection\r\nPhase 3 - Chairman Selection\r\nPhase 4 - Fellow Voting\r\nPhase 5 - Results\r\n### Important: Each phase should have a specific period of time and a phase should not start after the previous phase has been completed. \r\nFollowing are the instructions that need to be followed for each of the phases\r\n## Phase 1 - Fellow Nomination\r\n1. Provide the link [http://aomvotingapp.herokuapp.com/nominees/new](http://aomvotingapp.herokuapp.com/nominees/new) to all of the Fellows. Note: This step was already performed. \r\n2. Monitor the nomination process by checking the site [Nominees](http://aomvotingapp.herokuapp.com/nominees) where all of the nominees can be viewed as well as the Fellow associated. \r\n3. Monitor the site [Candidate Selection](http://aomvotingapp.herokuapp.com/candidate_selection) where the nominees should appear as they are created. This is key as this view is the next phase. \r\n4. In case that a Fellow's email is not in the database you can create it by adding it into the seeds.rb file. To include a new address just go to _db/migrate/seeds.rb_ and include the line `Member.create(:mail => 'type here the new email address')`. Save and make sure to run in the console `rake db:seeds` and then `rake db:migrate`. Finally run the same code in Heroku by typing `heroku run rake db:seeds` and `heroku run rake db:migrate`.\r\nAlthough not styled yet, you can add a member by visiting [new member](http://aomvotingapp.herokuapp.com/members/new)\r\n5. If needed nominees can be edited or deleted within the [Nominees](http://aomvotingapp.herokuapp.com/nominees) site. \r\n\r\n## Phase 2 - Candidate Selection\r\n1. Send the link to the site [Candidate Selection](http://aomvotingapp.herokuapp.com/candidate_selection) **ONLY to the committee members**.\r\n2. This view is using AJAX functionality for each checkbox so that when a checkbox is clicked a javascript function will do the following:\r\n* confirm (pop up) if the nominee really wants to be approved\r\n* if confirmed then the js will submit the data for that particular nominee. \r\nThere is no need for a submit button here, as soon as a nominee is checked his information will be updated.\r\n3. Monitor the site [Chairman Selection](http://aomvotingapp.herokuapp.com/chairman_selection) as it should be automatically populated after a nominee is approved by a committee member. \r\n\r\n## Phase 3 - Chairman Selection\r\n1. Send the link to the site [Chairman Selection](http://aomvotingapp.herokuapp.com/chairman_selection) **ONLY to the Chairman of the committee.**\r\n2. This view works exactly as the candidate selection view. \r\n3. Monitor the site [Fellows Vote](http://aomvotingapp.herokuapp.com/fellows_vote) as it should be automatically populated as the Chairman approves nominees. \r\n\r\n## Phase 4 - Fellow Voting\r\n1. Send the link to the site [Fellows Votes](http://aomvotingapp.herokuapp.com/fellows_vote) to ALL fellows.\r\n2. Each Fellow should provide their registered email for verification. Only if the email is verified and they haven't voted already the list with all the final nominees will be displayed. \r\n3. Note that if a member verifies his email the system will mark his email as voted, so the member MUST complete and submit his votes within the same session. \r\n4. By default each nominee appears with the \"Abstained\" option selected. Fellows should give a vote for every nominee before submitting. So if they submit without going over all of the nominees then his vote for those nominees will be the default (Abstained).\r\n5. The submit button is linked to a javascript function that does the following:\r\n* Alerts the user that the vote was submitted\r\n* submits the form using AJAX\r\n6. By this time monitor the [Results](http://aomvotingapp.herokuapp.com/results) site as it should populate with the first vote. \r\n\r\n## Phase 5 - Results\r\n1. Once the voting is closed distribute the link to the [Results](http://aomvotingapp.herokuapp.com/results) site **ONLY to the Chairman**.\r\n2. Verify that each row should add the same number and it should be the same number if a column is added. The sum of a row or a column should also be the same as the number of total voting members in the bottom of the site. \r\n***\r\n## Models\r\nThe App contains 3 models:\r\n1. members: A table with 5 columns: id, mail, created_at, updated_at, voted.\r\n* mail: is the mail address of a member. At the time there are 193 mail addresses registered. To include a new address just go to _db/migrate/seeds.rb_ and include the line `Member.create(:mail => 'type here the new email address')`. Save and make sure to run in the console `rake db:seeds` and then `rake db:migrate`. Finally run the same code in Heroku by typing `heroku run rake db:seeds` and `heroku run rake db:migrate`.\r\n* voted: of boolean type to keep track if the member already voted. \r\n\r\n2. votes: A table with 4 columns: vote_id, vote_type, created_at and updated_at.\r\n* vote_id: Type integer. There are 3 votes id (1, 2 and 3). Each id is associated with one type of vote.\r\n* vote_type: Type string. The 3 different types are: \"Confirmed\", \"Not Confirmed\" and \"Abstained\".\r\n\r\n3. nominees: A table where each row is a different nominee. All of the app relies on this model. The columns (attributes) are:\r\n* mail: Type String. Corresponds to the email of the nominee.\r\n* name: Type String. Corresponds to the name of the nominee. \r\n* cv: Type Text. Corresponds to the cv of the nominee. For the future this might be wanted to replaced by a pdf.\r\n* statement: Type Text. Corresponds to the statement of the nominee. For the future this might be wanted to replaced by a pdf.\r\n* committee_check: Type Boolean. This is true once a committee member approves this candidate. Those nominees who have this field as true are displayed in the chairman_selection view.\r\n* chairman_check: Type Boolean. This is true once the Chairman approves this candidate. Those nominees who have this field as true are displayed in the fellows_vote view.\r\n* confirmed: Type Integer. Keeps the count of the number of times that this nominee has been voted as \"Confirmed\" in the Fellows_vote view.\r\n* not_confirmed: Type Integer. Keeps the count of the number of times that this nominee has been voted as \"Not Confirmed\" in the Fellows_vote view.\r\n* abstained: Type String. Due to an initialization mistake this is of type String instead of Integer. Therefore it requires to be converted to integer where ever it is used (use method `.to_i`). Keeps the count of the number of times that this nominee has been voted as \"Abstained\" in the Fellows_vote view.\r\n* member_id: Type Integer. Unique identifier for each member. Provided automatically by rails. \r\n* nominator_mail: Type String. Records the fellow who nominated this candidate. Although this information is not displayed within any of the user views it might be helpful in case the candidate is selected as Fellow member. \r\n* committee_check_count: Type Integer. Keeps the count of the number of times that this nominee has been approved within the candidate_selection view.\r\n* vote_id: Type Integer. Records the type of the last vote received by each candidate. It is used to feed the columns confirmed, not_confirmed and abstained.\r\n\r\n***\r\n## Views\r\n### Layouts\r\nThe application.html.erb is the basic template or layout for all of the pages in the app. It consists basically of the main container and the logo of AOM. \r\n### Members\r\nFollowing the REST style rails automatically generates views for each model in order to create, update or delete instances for the model. In this case there are views to create a new member, to edit existing members that have been automatically created. This views are working but they have not been styled. \r\n### Votes\r\nSame as the case for Members\r\n### Nominees\r\nviews names in general are related to routes.rb and to the functionality they are performing.\r\n_form.html.erb is a partial holding the form for a new nominee.It is used in new.html.erb and edit.html.er\r\ncandidate_selection.html.erb\r\nchairman_selection.html.erb\r\nedit.html.erb\r\nfellows_vote.html.erb\r\nfellows_vote.js.erb is a javascript file that runs when the email verification button is clicked within the fellows_vote page\r\nindex.html.erb corresponds to the main /nominees site\r\nnew.html.erb\r\nresults.html.erb\r\nshow.html.erb displays information about the nominee. It is used after the creation of a nominee. \r\nupdate.js.erb\r\n\r\n***","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}